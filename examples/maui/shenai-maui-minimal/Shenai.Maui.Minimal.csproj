<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net9.0-android;net9.0-ios</TargetFrameworks>
    <OutputType>Exe</OutputType>
    <UseMaui>true</UseMaui>
    <SingleProject>true</SingleProject>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>

    <!-- Exclude SDK sources from this app's default item globs -->
    <DefaultItemExcludes>$(DefaultItemExcludes);Shenai.Maui.SDK/**</DefaultItemExcludes>

    <ApplicationTitle>Shenai Minimal</ApplicationTitle>
    <!-- Use a single bundle id across platforms to avoid launching stale builds -->
    <ApplicationId>ai.mxlabs.shenai-maui-minimal</ApplicationId>

    <!-- Min OS versions -->
    <SupportedOSPlatformVersion Condition="'$(TargetFramework)'=='net9.0-android'">26</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="'$(TargetFramework)'=='net9.0-ios'">13.0</SupportedOSPlatformVersion>
    <AndroidMinSdkVersion Condition="'$(TargetFramework)'=='net9.0-android'">26</AndroidMinSdkVersion>
    <TargetSdkVersion Condition="'$(TargetFramework)'=='net9.0-android'">35</TargetSdkVersion>
    <AndroidTargetSdkVersion Condition="'$(TargetFramework)'=='net9.0-android'">35</AndroidTargetSdkVersion>
  </PropertyGroup>

  <!-- iOS build tweaks -->
  <PropertyGroup Condition="'$(TargetFramework)'=='net9.0-ios'">
    <!-- Use dynamic registrar to avoid link-time ObjC class references -->
    <Registrar>dynamic</Registrar>
  </PropertyGroup>

  <!-- iOS Debug: disable linker to avoid trimming protocol wrappers from bindings -->
  <PropertyGroup Condition="'$(TargetFramework)'=='net9.0-ios' and '$(Configuration)'=='Debug'">
    <MtouchLink>None</MtouchLink>
  </PropertyGroup>

  <!-- MAUI .NET 9 explicit Controls package -->
  <ItemGroup>
    <PackageReference Include="Microsoft.Maui.Controls" Version="9.0.0" />
  </ItemGroup>

  <!-- MAUI splash so iOS generates a proper launch storyboard (prevents 320x480 fallback) -->
  <ItemGroup>
    <MauiSplashScreen Include="Resources/Splash/splash.svg" Color="#000000" BaseSize="128,128" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="Shenai.Maui.SDK/src/Shenai.Maui/Shenai.Maui.csproj"
                      Condition="'$(TargetFramework)' == 'net9.0-ios' or '$(TargetFramework)' == 'net9.0-android'" />
  </ItemGroup>

  <!-- Ensure native iOS framework from binding is linked at app level -->
  <ItemGroup Condition="'$(TargetFramework)'=='net9.0-ios'">
    <NativeReference Include="Shenai.Maui.SDK/src/Shenai.iOS.Binding/native/ShenaiSDK.framework">
      <Kind>Framework</Kind>
      <ForceLoad>true</ForceLoad>
      <SmartLink>true</SmartLink>
    </NativeReference>
    <!-- Root the binding assembly to prevent the trimmer from removing protocol types used by the registrar -->
    <TrimmerRootAssembly Include="Shenai.iOS.Binding" />
    <TrimmerRootDescriptor Include="Linker/PreserveShenai.xml" />
    <!-- Removed extra linker args and stub lib; NativeReference is sufficient -->
  </ItemGroup>

  <!-- Workaround: some bindings emit ReferenceNativeSymbol items (-u _OBJC_CLASS_*) which
       can fail to resolve for certain dynamic frameworks. Clear them before linking. -->
  <Target Name="WipeObjCReferenceSymbols"
          AfterTargets="_LoadLinkerOutput"
          BeforeTargets="_LinkNativeExecutable"
          Condition="'$(TargetFramework)'=='net9.0-ios'">
    <ItemGroup>
      <!-- Only remove ObjC class forced symbols to avoid dead-stripping core runtime symbols -->
      <_ProcessedReferenceNativeSymbol Remove="@(_ProcessedReferenceNativeSymbol)"
        Condition="$([System.String]::Copy('%(Identity)').StartsWith('_OBJC_CLASS_$_'))" />
    </ItemGroup>
  </Target>

</Project>
